import tkinter as tk


def find_replacements(word):
    replacements = []
    for i in range(len(word) - 2):
        for j in range(i + 2, len(word) + 2):
            subword = word[i:j]
            if subword in translation_dict:
                replacements.append((subword, translation_dict[subword][0]))
    return replacements

def createoutput(translated_text, input_field):
    
    file_path = "output.txt"
    with open(file_path, 'w') as file:
        file.write(translated_text + '\n' + input_field)


def translate_text(event):
    input_text = input_field.get("1.0", "end-1c")  # Get input text from the entry field

    # Split input text into individual words
    words = input_text.split()
    translated_words = []

    # Apply translation based on the dictionary
    for word in words: # get the input text
        # Find all possible replacements for the word
        replacements = find_replacements(word.lower())
        if replacements:  # if there are any replacements
            translated_word = word # use the original word
            # Replace each subword with its translation
            
            for subword, translated_subword in replacements: # get the word in subword
                translated_word = translated_word.replace(subword, translated_subword)
            translated_words.append(translated_word)
        else:
            translated_word = ""
            for char in word:
                translated_char = translation_dict.get(char.lower(), (char, ''))[0]
                translated_word += translated_char
            translated_words.append(translated_word)

    translated_text = " ".join(translated_words)
    
    output_field.delete("1.0", "end")  # Clear the output field
    output_field.insert("1.0", translated_text.strip())  # Display the translated text in the output field
    createoutput(translated_text, input_text)

translation_dict = {
    'aa': ('ays','·îë·îë'),
    'bb': ('bas',' ñ ñ'),
    'cc': ('cas','·ìµ·ìµ'),
    'dd': ('das',''),
    'ee': ('eas',''),
    'ff': ('fas',''),
    'gg': ('get',''),
    'hh': ('ha',''),
    'ii': ('ey',''),
    'jj': ('ya',''),
    'kk': ('ka',''),
    'll': ('la',''),
    'nn': ('na',''),
    'oo': ('ohu',''),
    'pp': ('pa',''),
    'qq': ('que',''),
    'rr': ('re',''),
    'ss': ('su',''),
    'tt': ('za',''),
    'uu': ('ue',''),
    'vv': ('ve',''),
    'ww': ('we',''),
    'xx': ('xe',''),
    'yy': ('ye',''),
    'zz': ('da',''),
    'a': ('ay',"·îë"),
    'b': ('bs'," ñ"),
    'c': ('see',"·ìµ"),
    'd': ('du',"‚üçÃÖ"),
    'e': ('eh',"·í∑"),
    'f': ('fr',"‚éì"),
    'g': ('ge',"Àß"),
    'h': ('hn',"‚çë"),
    'i': ('ie',"¬¶"),
    'j': ('ya',"‚ãÆ"),
    'k': ('har',"Íñå"),
    'l': ('leh',"Íñé"),
    'm': ('meh',"·í≤"),
    'n': ('ne',"„É™"),
    'o': ('ohe',"ùôπ"),
    'p': ('pu',"!¬°"),
    'q': ('cue',"·ëë"),
    'r': ('rue',"‚à∑"),
    's': ('see',"·ì≠"),
    't': ('tra',"‚Ñ∏"),
    'u': ('we',"‚öç"),
    'v': ('va',"‚çä"),
    'w': ('vik',"‚à¥"),
    'x': ('xsh',"/"),
    'y': ('vi',"«Å"),
    'z': ('cha',"‚®Ö"),
    'any': ('any-we','·îë„É™«Å'),
    'at': ('a-tra',),
    'anyway': ('an-vick-ahwe',),
    'ability': ('aysab-vitra',),
    'are': ('',''),
    'able': ('vik',''),
    'absoloutley': ('abys-oh-letra',''),
    'aquire': ('ar-patra',''),
    'buy': ('see-whe',''),
    'bat': ('sab-tra',''),
    'back': ('sal-char',''),
    'ball': ('sa-lar',''),
    'base': ('say-char',''),
    'big': ('be-sige',''),
    'call': ('say-lah',''),
    'carry': ('say-rah-leh',''),
    'cheap': ('sena-chapu',''),
    'card': ('see-rodue',''),
    'capacity': ('setra-ve',''),
    'code': ('so-sune',''),
    'cold': ('seo-lune',''),
    'click': ('sele-sar',''),
    'child': ('sene-lehdo',''),
    'client': ('seleh-hentra',''),
    'daily': ('do-whaleh',''),
    'damage': ('dure-gamy',''),
    'miata': ('mia-tra','0-0'),
    'exc': ('sab',''),
    'ca': ('say',''),
    'ch': ('sena',''),
    'da': ('Dowh',''),
    'da': ('dure',''),
    'ehx': ('Hex',''),
    'exp': ('ha',''),
    'bso': ('scoh',''),
    'lehehwhie': ('letra',''),
    'lehoh': ('loneh',''),
    'psw': ('Hex',''),
    'tra': ('tre-na',''),
    'nsl': ('sey',''),
    'ato': ('rue',''),
    'aff': ('afas',''),
    'tho': ('tran ',''),
    'tha': ('tran',''),
    'ayleho': ('alee',''),
    'staff': ('see-tra-afas',''),
    'lat': ('letra',''),
    'thi': ('tra-ien',''),
    'ngs': ('neh-la',''),
    'ing': ('ie-neh',''),
    'is': ('i-se',''),
    'lik': ('le-hara',''),
    'to': ('tra-ohe',''),
    'wha': ('vik-eneh',''),
    'whe': ('vik-enay',''),
    '„ÖÅ': ('ay',"·îë"),
    '„Ö†': ('bs'," ñ"),
    '„Öä': ('see',"·ìµ"),
    '„Öá': ('du',"‚üçÃÖ"),
    '„Ñ∑': ('eh',"·í∑"),
    '„Ñπ': ('fr',"‚éì"),
    '„Öé': ('ge',"Àß"),
    '„Öó': ('hn',"‚çë"),
    '„Öë': ('ie',"¬¶"),
    '„Öì': ('ya',"‚ãÆ"),
    '„Öè': ('har',"Íñå"),
    '„Ö£': ('leh',"Íñé"),
    '„Ö°': ('meh',"·í≤"),
    '„Öú': ('ne',"„É™"),
    '„Öê': ('ohe',"ùôπ"),
    '„Öî': ('pu',"!¬°"),
    '„ÖÇ': ('cue',"·ëë"),
    '„Ñ±': ('rue',"‚à∑"),
    '„Ñ¥': ('see',"·ì≠"),
    '„ÖÖ': ('tra',"‚Ñ∏"),
    '„Öï': ('we',"‚öç"),
    '„Öç': ('va',"‚çä"),
    '„Öà': ('vik',"‚à¥"),
    '„Öå': ('xsh',"/"),
    '„Öõ': ('vi',"«Å"),
    '„Öã': ('cha',"‚®Ö"),
    'Allt': ('ay-leh',''),
    'Bara': ('ohne-levi',''),
    'ehx': ('Hex',''),
    'Detta': ('trahn-iey',''),
    'En': ('ohne-eh',''),
    'fin': ('fuieneey',''),
    'Gr√∂t': ('puoh-rueie-dugi-eh',''),
    'hitta': ('fuienehdu',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),
    # 'ehx': ('Hex',''),

    'ehx': ('Hex','')
}
# Create the GUI
def open_help():
    print()

root = tk.Tk()
root.configure(width=480,height=640)
root.title("Laviera translator")
info = tk.Label(text="welcome to the official laviera translator!")
info.pack()
# Input field
input_field = tk.Text(root, height=10, width=100)
input_field.pack()
button = tk.Button(
    text="Click me!",
    width=10,
    height=1,
    bg="blue",
    fg="yellow",
    command=open_help()   
)
button.pack()
button1 = tk.Button(
    text="Click me!",
    width=10,
    height=1,
    bg="blue",
    fg="yellow",
    command=open_help()
)
button1.pack()


# Output field
output_field = tk.Text(root, height=10, width=100)
output_field.pack()
input_field.bind("<KeyRelease>", translate_text)

input_field.configure(bg='lightblue')
output_field.configure(bg="green")

# Run the program
root.mainloop()
